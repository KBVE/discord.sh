require('dotenv').config({ path: '../../.env' }); // Configuration for the environmental variables.
//require('@sapphire/plugin-logger/register');  Plugin Ready State Removed. Will add it back it once everything is running smoothly.
const tmi = require('tmi.js');                                                                      //  TMI.js
const axios = require('axios');                                                                     //  Axios
const { env } = require('../../src/./config');                                                      //  env Config
const Koa = require('koa');                                                                         //  Koa
const router = require('@koa/router');
const bodyParser = require('koa-bodyparser');
//const jwt = require('koa-jwt')  No need to add JWT yet, will do after a couple test cases
//const express = require('express');   Replacing Express with Koa.
//const bodyParser = require('body-parser');


async function _post(url,data) {     let resp;   try {   resp = await axios.post(url,data);  } catch (err) {     return Promise.reject(err);   }     return resp;    };

const twitch_api = async () => {
    
    const twitchClient = new tmi.Client({   options: { debug: true },   connection: { reconnect: true, secure: true },  identity: { username: env.TWITCH_USERNAME, password: env.TWITCH_BOT_TOKEN },    channels: [env.TWITCH_CHANNEL]  });

    try {   await twitchClient.connect();     } catch (error) {   console.log(error); }    // Boot up Twitch , which will be connect and on connected
    try {   twitchClient.on('connected', () =>{   console.log('Twitch started.'); });   } catch (error) {   console.log(error); }

    // Upon the connection, start Express   const app = express();          const router = express.Router();        app.use(bodyParser.urlencoded({ extended: true }));     app.use(bodyParser.json()); router.get('/twitch_api', function(req, res) {  res.json({ message: 'hooray! welcome to our api!' });   }); app.use('/api', router); app.listen(twitch_port);
    
    
    twitchClient.on('message', async (channel, user, message, self) => {
        if(!self) {
        
        let _j_Object = {
            username: `[Twitch] ${user.username}`,
            avatar_url: ``,
            content: message,
        };

        _post(env.TWITCH_DISCORD_WEBHOOK,_j_Object);
    }
    });
    const app = new Koa();  
    let app_router = new router();
    app.use(bodyParser());
    app_router.post('/api/twitch_api', (ctx, next) => {   
        console.log(ctx);
        ctx.body = ctx.request.body;
       // twitchClient.say(env.TWITCH_CHANNEL, `[Discord@${ctx.body.username}] ${ctx.body.message}`);   
      });
    app.use(app_router.routes()).use(app_router.allowedMethods());
    const http_app = app.listen(env.TWITCH_HTTP_API_PORT,   ()  =>  {           console.log(`Twitch API Server listening on port: ${env.TWITCH_HTTP_API_PORT}`);        });


}

twitch_api();

/*
module.exports = {
    twitch_api
};*/



